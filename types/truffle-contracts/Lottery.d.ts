/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { EventData, PastEventOptions } from 'web3-eth-contract'

export interface LotteryContract extends Truffle.Contract<LotteryInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<LotteryInstance>
}

type AllEvents = never

export interface LotteryInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>

  players(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails,
  ): Promise<string>

  enter: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >
    call(txDetails?: Truffle.TransactionDetails): Promise<void>
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>
  }

  getPlayers(txDetails?: Truffle.TransactionDetails): Promise<string[]>

  pickWinner: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >
    call(
      txDetails?: Truffle.TransactionDetails,
    ): Promise<{ 0: BN; 1: BN; 2: string }>
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>
  }

  methods: {
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>

    players(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<string>

    enter: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >
      call(txDetails?: Truffle.TransactionDetails): Promise<void>
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>
    }

    getPlayers(txDetails?: Truffle.TransactionDetails): Promise<string[]>

    pickWinner: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >
      call(
        txDetails?: Truffle.TransactionDetails,
      ): Promise<{ 0: BN; 1: BN; 2: string }>
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>
    }
  }

  getPastEvents(event: string): Promise<EventData[]>
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void,
  ): Promise<EventData[]>
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void,
  ): Promise<EventData[]>
}
